{"version":3,"file":"static/js/572.85df2404.chunk.js","mappings":"iRACA,EAAiC,kCAAjC,EAA0E,wB,oBCyE1E,EAlEkB,WACd,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACtB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAED,UAATD,GACAR,EAASS,GAEA,aAATD,GACAN,EAAYO,EAEnB,EAEKC,EAAkB,mCAAG,WAAMJ,GAAN,iEACvBA,EAAMK,iBACNR,GAASS,EAAAA,EAAAA,IAAM,CAAEb,MAAAA,EAAOE,SAAAA,KACxBY,IAHuB,2CAAH,sDAMlBA,EAAQ,WACVb,EAAS,IACTE,EAAY,GACf,EAED,OACI,gBAAKY,UAAWC,EAAhB,UACI,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACI,UAACC,EAAA,EAAD,CAAMC,SAAUV,EAAoBI,UAAWC,EAA/C,WACI,UAACI,EAAA,QAAD,CAAYL,UAAU,OAAOO,UAAU,iBAAvC,WACI,SAACF,EAAA,QAAD,qBACA,SAACA,EAAA,UAAD,CACIG,KAAK,QACLC,YAAY,cACZf,KAAK,QACLC,MAAOV,EACPyB,SAAUnB,EACVoB,aAAa,QACbC,UAAQ,QAGhB,UAACP,EAAA,QAAD,CAAYL,UAAU,OAAOO,UAAU,oBAAvC,WACI,SAACF,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACIG,KAAK,WACLd,KAAK,WACLC,MAAOR,EACPsB,YAAY,iBACZC,SAAUnB,EACVoB,aAAa,QACbC,UAAQ,QAGhB,gBAAKZ,UAAU,eAAf,UACI,SAACa,EAAA,EAAD,CAAQC,QAAQ,gBAAgBN,KAAK,SAArC,6BAQvB,C","sources":["webpack://react-homework-template/./src/pages/LogIn/LogInForm.module.css?17af","pages/LogIn/LogInForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"LogInForm_loginContainer__LdAPK\",\"form\":\"LogInForm_form__TvUhm\"};","import { Form, Button } from 'react-bootstrap';\nimport { useState, Suspense } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/authOperations';\nimport style from './LogInForm.module.css';\n\nimport Loader from 'components/Loader';\n\nconst LoginForm = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const handleInputChange = event => {\n        const { name, value } = event.currentTarget;\n\n        if (name === 'email') {\n            setEmail(value);\n        }\n        if (name === 'password') {\n            setPassword(value);\n        }\n    };\n\n    const handleSubmitChange = async event => {\n        event.preventDefault();\n        dispatch(logIn({ email, password }));\n        reset();\n    };\n\n    const reset = () => {\n        setEmail('');\n        setPassword('');\n    };\n\n    return (\n        <div className={style.loginContainer}>\n            <Suspense fallback={<Loader />}>\n                <Form onSubmit={handleSubmitChange} className={style.form}>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            name=\"email\"\n                            value={email}\n                            onChange={handleInputChange}\n                            autoComplete=\"false\"\n                            required\n                        />\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            value={password}\n                            placeholder=\"Enter password\"\n                            onChange={handleInputChange}\n                            autoComplete=\"false\"\n                            required\n                        />\n                    </Form.Group>\n                    <div className=\"d-grid gap-2\">\n                        <Button variant=\"outline-light\" type=\"submit\">\n                            Sign Up\n                        </Button>\n                    </div>\n                </Form>\n            </Suspense>\n        </div>\n    );\n};\nexport default LoginForm;"],"names":["useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleInputChange","event","currentTarget","name","value","handleSubmitChange","preventDefault","logIn","reset","className","style","Suspense","fallback","Loader","Form","onSubmit","controlId","type","placeholder","onChange","autoComplete","required","Button","variant"],"sourceRoot":""}